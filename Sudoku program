#include <stdio.h>
#include <stdbool.h>
#define N 9
bool is_valid(int board[N][N], int row, int col, int num) {
for (int i = 0; i < N; i++) 
{
  if (board[row][i] == num)
  {
    return false;
  }
 }
for (int i = 0; i < N; i++) 
{
  if (board[i][col] == num) 
  {
    return false;
  }
}
int start_row = row - row % 3;
int start_col = col - col % 3;
for (int i = 0; i < 3; i++) 
{
  for (int j = 0; j < 3; j++)
  {
    if (board[i + start_row][j + start_col] == num)
    {
       return false;
    }
  }
}
return true;
}
bool solve_sudoku(int board[N][N]) 
{
  int row, col;
  bool found_empty = false;
  for (row = 0; row < N; row++)
  {
    for (col = 0; col < N; col++) 
    {
       if (board[row][col] == 0)
       {
         found_empty = true;
         break;
       }
    }
      if (found_empty) 
      {
        break;
      }
  }
 if (!found_empty) 
 {
  return
 }
 for (int num = 1; num <= 9;num++)
 {
   if (is_valid(board, row, col, num)) 
   {
      board[row][col] = num;
      if (solve_sudoku(board))
      {
       return true;
      }
      board[row][col] = 0;
   }
 }
  return false;
}
void print_board(int board[N][N])
{
  for (int i = 0; i < N; i++)
  {
    for (int j = 0; j < N; j++) 
    {
      printf("%d ", board[i][j]);
    }
      printf("\n");
    }
}
int main()
{
  int board[N][N] = {
   {5, 3, 0, 0, 7, 0, 0, 0, 0},
   {6, 0, 0, 1, 9, 5, 0, 0, 0},
   {0, 9, 8, 0, 0, 0, 0, 6, 0},
   {8, 0, 0, 0, 6, 0, 0, 0, 3},
   {4, 0, 0, 8, 0, 3, 0, 0, 1},
   {7, 0, 0, 0, 2, 0, 0, 0, 6},
   {0, 6, 0, 0, 0, 0, 2, 8, 0},
   {0, 0, 0, 4, 1, 9, 0, 0, 5},
   {0, 0, 0, 0, 8, 0, 0, 7, 9}
  };
if (solve_sudoku(board)) 
{
   printf("Solution:\n");
   print_board(board);
} 
else 
{
   printf("No solution exists.\n");
}
 return 0;
}
